{"version":3,"sources":["utils/TodosContext.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.jsx","utils/useLocalStorage.jsx","index.jsx"],"names":["TodosContext","React","createContext","TodoItem","memo","todo","useContext","onRemove","onComplete","editTodo","useState","editable","setEditable","title","newTitle","setNewTitle","completed","id","saveEditedTodo","key","console","log","className","classNames","active","editing","type","checked","onChange","onDoubleClick","onClick","autoFocus","value","event","target","onKeyDown","onBlur","TodoList","todos","map","App","initialValue","JSON","parse","localStorage","getItem","setValue","setItem","stringify","useLocalStorage","setTodos","query","setQuery","filter","setFilter","activeTodos","useMemo","completedTodos","addTodo","useCallback","newTodo","Date","submitHandler","preventDefault","todoId","removeTodo","clearCompleted","completeTodo","setAllCompleted","length","visibleTodos","showAll","showActive","showCompleted","onSubmit","placeholder","htmlFor","Provider","href","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4912fd0c.chunk.js","sourcesContent":["import React from 'react';\n\nexport const TodosContext = React.createContext([]);\n","import React, { useState, useContext } from 'react';\nimport { TodosContext } from '../utils/TodosContext';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = React.memo(\n  ({ todo }) => {\n    const { onRemove, onComplete, editTodo } = useContext(TodosContext);\n    const [editable, setEditable] = useState(false);\n    const [newTitle, setNewTitle] = useState(todo.title);\n\n    const { title, completed, id } = todo;\n\n    const onEdit = () => {\n      setEditable(true)\n    }\n\n    const saveEditedTodo = (key) => {\n      if (!newTitle) {\n        return;\n      }\n      switch (key) {\n        case 'Escape':\n          setNewTitle(title);\n          setEditable(false);\n          break;\n        case 'Blur':\n        case 'Enter':\n          editTodo(id, newTitle)\n          setEditable(false);\n      }\n    }\n\n    console.log('Rendering TodoItem');\n\n    return (\n      <li\n        className={classNames({\n          completed: completed,\n          active: !completed,\n          editing: editable,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={completed}\n            onChange={() => {\n              onComplete(id)\n            }}\n          />\n          <label\n            onDoubleClick={onEdit}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => {\n              onRemove(id)\n            }}\n          />\n        </div>\n        {editable && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            autoFocus={true}\n            value={newTitle}\n            onChange={(event) => {\n              setNewTitle(event.target.value)\n            }}\n            onKeyDown={(event) => {\n              saveEditedTodo(event.key);\n            }}\n            onBlur={() => {\n              saveEditedTodo('Blur')\n            }}\n          />\n        )}\n      </li>\n    )\n  }\n)\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  })\n}","import React, { useContext } from \"react\";\nimport { TodosContext } from '../utils/TodosContext';\nimport { TodoItem } from \"./TodoItem\"\n\nexport const TodoList = React.memo(\n  () => {\n    const { todos } = useContext(TodosContext);\n\n    console.log('Rendering TodoList');\n\n    return (\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </ul>\n    )\n  }\n)\n","import React, { useState, useCallback, useMemo } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { useLocalStorage } from './utils/useLocalStorage';\nimport { TodosContext } from './utils/TodosContext';\nimport classNames from 'classnames';\nimport './App.css';\n\n// let initialTodos = [\n//   { title: 'Change winter tires', id: '1927', completed: false },\n//   { title: 'Check pressure', id: '1312', completed: false },\n//   { title: 'Repair water tap', id: '1610', completed: true },\n//   { title: 'Buy beer for barbeckue', id: '1584', completed: false }\n// ]\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState('all');\n\n  const activeTodos = useMemo(() => {\n    return todos.filter(todo => (\n    todo.completed === false\n  ))\n  }, [todos])\n  const completedTodos = useMemo(() => {\n    return todos.filter(todo => (\n      todo.completed === true\n    ))\n  }, [todos])\n\n  const addTodo = useCallback((title) => {\n    const newTodo = {\n      title,\n      completed: false,\n      id: +new Date(),\n    }\n    return (\n      setTodos([...todos, newTodo])\n    )\n  }, [todos, setTodos])\n\n  const submitHandler = useCallback((event) => {\n    event.preventDefault();\n    if (!query) { return }\n    addTodo(query);\n    setQuery('');\n  }, [addTodo, query])\n\n  const editTodo = useCallback((todoId, newTitle) => {\n    setTodos(\n      [...todos].map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n        return {\n          ...todo,\n          title: newTitle,\n        }\n      })\n    )\n  }, [todos, setTodos])\n\n\n  const removeTodo = useCallback((todoId) => {\n    setTodos(\n      [...todos].filter(todo => todo.id !== todoId)\n    )\n  }, [todos, setTodos])\n\n  const clearCompleted = useCallback(() => {\n    setTodos(\n      [...todos.filter(todo => (\n        todo.completed !== true\n      ))]\n    )\n  }, [todos, setTodos])\n\n  const completeTodo = useCallback((todoId) => {\n    setTodos(\n      [...todos.map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n        return {\n          ...todo,\n          completed: !todo.completed,\n        }\n      })]\n    )\n  }, [todos, setTodos]);\n\n  const setAllCompleted = useCallback(() => {\n    setTodos(\n      [...todos.map(todo => {\n        if (completedTodos.length === todos.length) {\n          return {\n            ...todo,\n            completed: false,\n          }\n        }\n        return {\n          ...todo,\n          completed: true,\n        }\n      })]\n    )\n  }, [todos, setTodos]);\n\n  const visibleTodos = useMemo(() => {\n    switch (filter) {\n      case 'active':\n        return activeTodos;\n      case 'completed':\n        return completedTodos;\n      default: return todos;\n    }\n  }, [todos, filter, activeTodos, completedTodos])\n\n  const showAll = useCallback(() => {\n    setFilter('all');\n  }, [])\n  const showActive = useCallback(() => {\n    setFilter('active')\n  }, [])\n  const showCompleted = useCallback(() => {\n    setFilter('completed')\n  }, [])\n\n  return (\n    <>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={(submitHandler)}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={query}\n              onChange={event => setQuery(event.target.value)}\n              onBlur={(submitHandler)}\n            />\n          </form>\n        </header>\n\n        {todos.length > 0 && (\n          <>\n            <section className=\"main\">\n              <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n              <label\n                htmlFor=\"toggle-all\"\n                onClick={setAllCompleted}\n              >\n                Mark all as complete\n              </label>\n\n              <TodosContext.Provider value={{\n                todos: visibleTodos,\n                onRemove: removeTodo,\n                onComplete: completeTodo,\n                editTodo: editTodo,\n              }} >\n                <TodoList />\n              </TodosContext.Provider>\n\n            </section>\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {activeTodos.length === 1\n                  ? '1 item left'\n                  : (`${activeTodos.length} items left`)\n                }\n              </span>\n\n              <ul className=\"filters\">\n                <li>\n                  <a\n                    href=\"#/\"\n                    className={classNames({ selected: filter === 'all' })}\n                    onClick={showAll}\n                  >\n                    All\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#/active\"\n                    className={classNames({ selected: filter === 'active' })}\n                    onClick={showActive}\n                  >\n                    Active\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#/completed\"\n                    className={classNames({ selected: filter === 'completed' })}\n                    onClick={showCompleted}\n                  >\n                    Completed\n                  </a>\n                </li>\n              </ul>\n\n              {activeTodos.length < todos.length && (\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  onClick={clearCompleted}\n                >\n                  Clear completed\n                </button>\n              )}\n            </footer>\n          </>\n        )}\n      </section>\n\n      <footer className=\"info\">\n        <p>Double-click to edit a todo</p>\n        <p>Created by <a href=\"http://twitter.com/oscargodson\">Oscar Godson</a></p>\n        <p>Refactored by <a href=\"https://github.com/cburgmer\">Christoph Burgmer</a></p>\n        <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\n      </footer>\n    </>\n  )\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n  const save = (value) => {\n    setValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  return [value, save];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}