{"version":3,"sources":["utils/TodosContext.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.jsx","utils/useLocalStorage.jsx","index.jsx"],"names":["TodosContext","React","createContext","TodoItem","todo","useContext","removeTodo","completeTodo","editTodo","useState","editable","setEditable","title","newTitle","setNewTitle","completed","id","saveEditedTodo","key","className","classNames","active","editing","type","checked","onChange","onDoubleClick","onClick","autoFocus","value","event","target","onKeyDown","onBlur","TodoList","memo","todos","map","App","initialValue","JSON","parse","localStorage","getItem","setValue","setItem","stringify","useLocalStorage","setTodos","query","setQuery","filter","setFilter","activeTodos","useMemo","completedTodos","addTodo","useCallback","newTodo","Date","submitHandler","preventDefault","todoId","clearCompleted","setAllCompleted","length","visibleTodos","showAll","showActive","showCompleted","contextValue","onSubmit","placeholder","htmlFor","Provider","href","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.745e74eb.chunk.js","sourcesContent":["import React from 'react';\n\nexport const TodosContext = React.createContext([]);\n","import React, { useState, useContext } from 'react';\nimport { TodosContext } from '../utils/TodosContext';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo }) => {\n  const { removeTodo, completeTodo, editTodo } = useContext(TodosContext);\n  const [editable, setEditable] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const { title, completed, id } = todo;\n\n  const onEdit = () => {\n    setEditable(true)\n  }\n\n  const saveEditedTodo = (key) => {\n    if (!newTitle) {\n      return;\n    }\n    switch (key) {\n      case 'Escape':\n        setNewTitle(title);\n        setEditable(false);\n        break;\n      case 'Blur':\n      case 'Enter':\n        editTodo(id, newTitle)\n        setEditable(false);\n    }\n  }\n\n  return (\n    <li\n      className={classNames({\n        completed: completed,\n        active: !completed,\n        editing: editable,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => {\n            completeTodo(id)\n          }}\n        />\n        <label\n          onDoubleClick={onEdit}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            removeTodo(id)\n          }}\n        />\n      </div>\n      {editable && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          autoFocus={true}\n          value={newTitle}\n          onChange={(event) => {\n            setNewTitle(event.target.value)\n          }}\n          onKeyDown={(event) => {\n            saveEditedTodo(event.key);\n          }}\n          onBlur={() => {\n            saveEditedTodo('Blur')\n          }}\n        />\n      )}\n    </li>\n  )\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  })\n}\n","import React, { useContext } from \"react\";\nimport { TodosContext } from '../utils/TodosContext';\nimport { TodoItem } from \"./TodoItem\"\n\nexport const TodoList = React.memo(\n  () => {\n    const { todos } = useContext(TodosContext);\n\n    return (\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </ul>\n    )\n  }\n)\n","import React, { useState, useCallback, useMemo } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { useLocalStorage } from './utils/useLocalStorage';\nimport { TodosContext } from './utils/TodosContext';\nimport classNames from 'classnames';\nimport './App.css';\n\n// let initialTodos = [\n//   { title: 'Change winter tires', id: '1927', completed: false },\n//   { title: 'Check pressure', id: '1312', completed: false },\n//   { title: 'Repair water tap', id: '1610', completed: true },\n//   { title: 'Buy beer for barbeckue', id: '1584', completed: false }\n// ]\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState('all');\n\n  const activeTodos = useMemo(() => {\n    return todos.filter(todo => (\n    todo.completed === false\n  ))\n  }, [todos])\n  const completedTodos = useMemo(() => {\n    return todos.filter(todo => (\n      todo.completed === true\n    ))\n  }, [todos])\n\n  const addTodo = useCallback((title) => {\n    const newTodo = {\n      title,\n      completed: false,\n      id: +new Date(),\n    }\n    return (\n      setTodos([...todos, newTodo])\n    )\n  }, [todos, setTodos])\n\n  const submitHandler = useCallback((event) => {\n    event.preventDefault();\n    if (!query) { return }\n    addTodo(query);\n    setQuery('');\n  }, [addTodo, query])\n\n  const editTodo = useCallback((todoId, newTitle) => {\n    setTodos(\n      [...todos].map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n        return {\n          ...todo,\n          title: newTitle,\n        }\n      })\n    )\n  }, [todos, setTodos])\n\n\n  const removeTodo = useCallback((todoId) => {\n    setTodos(\n      [...todos].filter(todo => todo.id !== todoId)\n    )\n  }, [todos, setTodos])\n\n  const clearCompleted = useCallback(() => {\n    setTodos(\n      [...todos.filter(todo => (\n        todo.completed !== true\n      ))]\n    )\n  }, [todos, setTodos])\n\n  const completeTodo = useCallback((todoId) => {\n    setTodos(\n      [...todos.map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n        return {\n          ...todo,\n          completed: !todo.completed,\n        }\n      })]\n    )\n  }, [todos, setTodos]);\n\n  const setAllCompleted = useCallback(() => {\n    setTodos(\n      [...todos.map(todo => {\n        if (completedTodos.length === todos.length) {\n          return {\n            ...todo,\n            completed: false,\n          }\n        }\n        return {\n          ...todo,\n          completed: true,\n        }\n      })]\n    )\n  }, [todos, setTodos]);\n\n  const visibleTodos = useMemo(() => {\n    switch (filter) {\n      case 'active':\n        return activeTodos;\n      case 'completed':\n        return completedTodos;\n      default: return todos;\n    }\n  }, [todos, filter, activeTodos, completedTodos])\n\n  const showAll = useCallback(() => {\n    setFilter('all');\n  }, [])\n  const showActive = useCallback(() => {\n    setFilter('active')\n  }, [])\n  const showCompleted = useCallback(() => {\n    setFilter('completed')\n  }, [])\n\n  const contextValue = useMemo(() => {\n    return ({\n      todos: visibleTodos,\n      removeTodo,\n      completeTodo,\n      editTodo,\n    })\n  }, [visibleTodos, removeTodo, completeTodo, editTodo]);\n\n  return (\n    <>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={(submitHandler)}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={query}\n              onChange={event => setQuery(event.target.value)}\n              onBlur={(submitHandler)}\n            />\n          </form>\n        </header>\n\n        {todos.length > 0 && (\n          <>\n            <section className=\"main\">\n              <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n              <label\n                htmlFor=\"toggle-all\"\n                onClick={setAllCompleted}\n              >\n                Mark all as complete\n              </label>\n\n              <TodosContext.Provider value={contextValue} >\n                <TodoList />\n              </TodosContext.Provider>\n\n            </section>\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {activeTodos.length === 1\n                  ? '1 item left'\n                  : (`${activeTodos.length} items left`)\n                }\n              </span>\n\n              <ul className=\"filters\">\n                <li>\n                  <a\n                    href=\"#/\"\n                    className={classNames({ selected: filter === 'all' })}\n                    onClick={showAll}\n                  >\n                    All\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#/active\"\n                    className={classNames({ selected: filter === 'active' })}\n                    onClick={showActive}\n                  >\n                    Active\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#/completed\"\n                    className={classNames({ selected: filter === 'completed' })}\n                    onClick={showCompleted}\n                  >\n                    Completed\n                  </a>\n                </li>\n              </ul>\n\n              {activeTodos.length < todos.length && (\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  onClick={clearCompleted}\n                >\n                  Clear completed\n                </button>\n              )}\n            </footer>\n          </>\n        )}\n      </section>\n\n      <footer className=\"info\">\n        <p>Double-click to edit a todo</p>\n        <p>Created by <a href=\"http://twitter.com/oscargodson\">Oscar Godson</a></p>\n        <p>Refactored by <a href=\"https://github.com/cburgmer\">Christoph Burgmer</a></p>\n        <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\n      </footer>\n    </>\n  )\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n  const save = (value) => {\n    setValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  return [value, save];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}