{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","App.jsx","utils/useLocalStorage.jsx","index.jsx"],"names":["TodoItem","todo","onRemove","onComplete","editTodo","useState","editable","setEditable","title","newTitle","setNewTitle","completed","id","saveEditedTodo","key","className","classNames","active","editing","type","checked","onChange","onDoubleClick","onClick","autoFocus","value","event","target","onKeyDown","onBlur","TodoList","todos","map","App","initialValue","JSON","parse","localStorage","getItem","setValue","setItem","stringify","useLocalStorage","setTodos","query","setQuery","filter","setFilter","activeTodos","completedTodos","visibleTodos","onSubmit","preventDefault","newTodo","Date","addTodo","placeholder","length","htmlFor","todoId","href","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cea3740.chunk.js","sourcesContent":["import { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, onRemove, onComplete, editTodo }) => {\n  const [editable, setEditable] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const { title, completed, id } = todo;\n\n  const onEdit = () => {\n    setEditable(true)\n  }\n\n  const saveEditedTodo = (key) => {\n    if (!newTitle) {\n      return;\n    }\n    switch (key) {\n      case 'Escape':\n        setNewTitle(title);\n        setEditable(false);\n        break;\n      case 'Blur':\n      case 'Enter':\n        editTodo(id, newTitle)\n        setEditable(false);\n    }\n  }\n\n  return (\n    <li\n      className={classNames({\n        completed: completed,\n        active: !completed,\n        editing: editable,\n      })}\n\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => {\n            onComplete(id)\n          }}\n        />\n        <label\n          onDoubleClick={onEdit}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            onRemove(id)\n          }}\n        />\n      </div>\n      {editable && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          autoFocus={true}\n          value={newTitle}\n          onChange={(event) => {\n            setNewTitle(event.target.value)\n          }}\n          onKeyDown={(event) => {\n            saveEditedTodo(event.key);\n          }}\n          onBlur={() => {\n            saveEditedTodo('Blur')\n          }}\n        />\n      )}\n\n    </li>\n  )\n}\n","import { TodoItem } from \"./TodoItem\"\n\nexport const TodoList = ({ todos, onRemove, onComplete, editTodo }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          onRemove={onRemove}\n          onComplete={onComplete}\n          editTodo={editTodo}\n          key={todo.id}\n        />\n      ))}\n    </ul>\n  )\n}\n","import { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { useLocalStorage } from './utils/useLocalStorage';\nimport classNames from 'classnames';\nimport './App.css';\n\n// let initialTodos = [\n//   { title: 'Change winter tires', id: '1927', completed: false },\n//   { title: 'Check pressure', id: '1312', completed: false },\n//   { title: 'Repair water tap', id: '1610', completed: true },\n//   { title: 'Buy beer for barbeckue', id: '1584', completed: false }\n// ]\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState('all');\n\n  const activeTodos = todos.filter(todo => (\n    todo.completed === false\n  ))\n  const completedTodos = todos.filter(todo => (\n    todo.completed === true\n  ))\n\n  const addTodo = (title) => {\n    const newTodo = {\n      title,\n      completed: false,\n      id: +new Date(),\n    }\n    return (\n      setTodos([...todos, newTodo])\n    )\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if (!query) { return }\n    addTodo(query);\n    setQuery('');\n  }\n\n  const editTodo = (todoId, newTitle) => {\n    setTodos(\n      [...todos].map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n        return {\n          ...todo,\n          title: newTitle,\n        }\n      })\n    )\n  }\n\n  const removeTodo = (todoId) => {\n    setTodos(\n      [...todos].filter(todo => todo.id !== todoId)\n    )\n  }\n\n  const clearCompleted = () => {\n    setTodos(\n      [...todos.filter(todo => (\n        todo.completed !== true\n      ))]\n    )\n  }\n\n  const completeTodo = (todoId) => {\n    setTodos(\n      [...todos.map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n        return {\n          ...todo,\n          completed: !todo.completed,\n        }\n      })]\n    )\n  }\n\n  const setAllCompleted = () => {\n    setTodos(\n      [...todos.map(todo => {\n        if (completedTodos.length === todos.length) {\n          return {\n            ...todo,\n            completed: false,\n          }\n        }\n        return {\n          ...todo,\n          completed: true,\n        }\n      })]\n    )\n  }\n\n  let visibleTodos = [...todos];\n  switch (filter) {\n    case 'active':\n      visibleTodos = activeTodos;\n      break;\n    case 'completed':\n      visibleTodos = completedTodos;\n      break;\n    default: visibleTodos = todos;\n  }\n\n  const showAll = () => {\n    setFilter('all');\n  }\n  const showActive = () => {\n    setFilter('active')\n  }\n  const showCompleted = () => {\n    setFilter('completed')\n  }\n\n  return (\n    <>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={(submitHandler)}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={query}\n              onChange={event => setQuery(event.target.value)}\n            />\n          </form>\n        </header>\n\n        {todos.length > 0 && (\n          <>\n            <section className=\"main\">\n              <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n              <label\n                htmlFor=\"toggle-all\"\n                onClick={setAllCompleted}\n              >\n                Mark all as complete\n              </label>\n\n              <TodoList\n                todos={visibleTodos}\n                onRemove={removeTodo}\n                onComplete={completeTodo}\n                editTodo={editTodo}\n              />\n            </section>\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {activeTodos.length === 1\n                  ? '1 item left'\n                  : (`${activeTodos.length} items left`)\n                }\n              </span>\n\n              <ul className=\"filters\">\n                <li>\n                  <a\n                    href=\"#/\"\n                    className={classNames({ selected: filter === 'all' })}\n                    onClick={showAll}\n                  >\n                    All\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#/active\"\n                    className={classNames({ selected: filter === 'active' })}\n                    onClick={showActive}\n                  >\n                    Active\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#/completed\"\n                    className={classNames({ selected: filter === 'completed' })}\n                    onClick={showCompleted}\n                  >\n                    Completed\n                  </a>\n                </li>\n              </ul>\n\n              {activeTodos.length < todos.length && (\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  onClick={clearCompleted}\n                >\n                  Clear completed\n                </button>\n              )}\n            </footer>\n          </>\n        )}\n      </section>\n\n      <footer className=\"info\">\n        <p>Double-click to edit a todo</p>\n        <p>Created by <a href=\"http://twitter.com/oscargodson\">Oscar Godson</a></p>\n        <p>Refactored by <a href=\"https://github.com/cburgmer\">Christoph Burgmer</a></p>\n        <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\n      </footer>\n    </>\n  )\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n  const save = (value) => {\n    setValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  return [value, save];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}